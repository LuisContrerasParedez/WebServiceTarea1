import { CalendarSyncService } from './calendar-sync.service';
import { ConnectCalendarDto, ProviderDTO } from './dto/create-calendar-sync.dto';
import { UpsertEventDto } from './dto/upsert-event.dto';
export declare class CalendarSyncController {
    private readonly calendarSyncService;
    constructor(calendarSyncService: CalendarSyncService);
    connect(userId: number, dto: ConnectCalendarDto): Promise<{
        id: number;
        userId: number;
        provider: import(".prisma/client").$Enums.CalendarProvider;
        email: string;
        accessToken: string;
        refreshToken: string | null;
        expiresAt: Date | null;
        scope: string | null;
        status: import(".prisma/client").$Enums.SyncStatus;
        createdAt: Date;
        updatedAt: Date;
        webhookSecret: string | null;
        webhookResourceId: string | null;
    }>;
    upsert(userId: number, provider: ProviderDTO, accountEmail: string, dto: UpsertEventDto): Promise<{
        id: number;
        provider: import(".prisma/client").$Enums.CalendarProvider;
        createdAt: Date;
        updatedAt: Date;
        accountId: number;
        itemType: import(".prisma/client").$Enums.CalendarItemType;
        externalId: string | null;
        crmId: number | null;
        title: string;
        description: string | null;
        location: string | null;
        startAt: Date;
        endAt: Date;
        allDay: boolean;
        timezone: string | null;
        etag: string | null;
        lastExternalAt: Date | null;
        lastCrmAt: Date | null;
        deleted: boolean;
    }>;
    list(userId: number, provider: ProviderDTO, accountEmail: string): import(".prisma/client").Prisma.PrismaPromise<{
        id: number;
        provider: import(".prisma/client").$Enums.CalendarProvider;
        createdAt: Date;
        updatedAt: Date;
        accountId: number;
        itemType: import(".prisma/client").$Enums.CalendarItemType;
        externalId: string | null;
        crmId: number | null;
        title: string;
        description: string | null;
        location: string | null;
        startAt: Date;
        endAt: Date;
        allDay: boolean;
        timezone: string | null;
        etag: string | null;
        lastExternalAt: Date | null;
        lastCrmAt: Date | null;
        deleted: boolean;
    }[]>;
    remove(id: number): import(".prisma/client").Prisma.Prisma__CalendarEventClient<{
        id: number;
        provider: import(".prisma/client").$Enums.CalendarProvider;
        createdAt: Date;
        updatedAt: Date;
        accountId: number;
        itemType: import(".prisma/client").$Enums.CalendarItemType;
        externalId: string | null;
        crmId: number | null;
        title: string;
        description: string | null;
        location: string | null;
        startAt: Date;
        endAt: Date;
        allDay: boolean;
        timezone: string | null;
        etag: string | null;
        lastExternalAt: Date | null;
        lastCrmAt: Date | null;
        deleted: boolean;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
}
